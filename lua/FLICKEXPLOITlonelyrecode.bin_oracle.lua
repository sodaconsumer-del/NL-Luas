local l_pui_0 = require("neverlose/pui");
local l_MTools_0 = require("neverlose/MTools");
local l_aim_0 = require("neverlose/anti_aim");
local l_clipboard_0 = require("neverlose/clipboard");
ui.sidebar("lonely", "stars");
local v4 = l_pui_0.create(ui.get_icon("house"), "main");
local v5 = l_pui_0.create(ui.get_icon("house"), "config system");
local v6 = l_pui_0.create(ui.get_icon("shield"), "  "):switch("enable aa"):visibility(true);
local v7 = l_pui_0.create(ui.get_icon("shield"), " ");
local v8 = l_pui_0.create(ui.get_icon("shield"), "");
local v9 = {
    [1] = "global", 
    [2] = "stand", 
    [3] = "walk", 
    [4] = "slowwalk", 
    [5] = "air", 
    [6] = "airduck", 
    [7] = "duck", 
    [8] = "duckrun", 
    [9] = "fakelag"
};
local v10 = {};
local v11 = v8:list("", v9);
local v12 = l_pui_0.create(ui.get_icon("gear"), "tweaks");
local v13 = v12:combo("manual", "off", "left", "right", "forward");
local v14 = v12:switch("freestand");
local v15 = v14:create():selectable("disabler", "stand", "walk", "slowwalk", "air", "airduck", "duck", "duckrun", "fakelag");
local v16 = v12:selectable("safehead mode", "knife", "zeus");
local v17 = v12:selectable("tweaks", "bombsite e-fix", "super toss", "fast ladder movement");
local v18 = v12:switch("automatic grenade release");
local v19 = v18:create();
local v20 = v19:slider("damage", 1, 50, 50);
local v21 = v12:switch("kill say");
local function v22()
    -- upvalues: v19 (ref), v18 (ref)
    v19:set_visible(v18:get());
end;
v22();
v18:set_callback(v22);
local v23 = l_pui_0.create(ui.get_icon("gear"), "Visuals");
local v24 = {
    [59] = "Off", 
    [160] = "16:10", 
    [177] = "16:9", 
    [125] = "5:4", 
    [150] = "3:2", 
    [133] = "4:3"
};
local v26 = v23:slider("aspect ratio value", 59, 200, 0, 0.01, function(v25)
    -- upvalues: v24 (ref)
    return v24[v25];
end);
legs_jitter = v23:label("animfix", false, nil, function(v27)
    return {
        jitter_combo = v27:combo("ground", "disabled", "flex", "static", "walking", "fast jitter", "slow jitter"), 
        air_combo = v27:combo("air", "disabled", "static", "kangaroo", "walking"), 
        walk_combo = v27:combo("slow walking", "disabled", "static", "jitter", "pirat"), 
        other_combo = v27:selectable("other animation", "earthquake", "move lean")
    };
end);
local v28 = v23:switch("hit logs", false);
local v29 = v23:switch("center indicators", false);
local v30 = v29:create():combo("ind type", "pixel", "recode");
local v31 = v23:switch("watermark");
local function v35(v32, v33, v34)
    return v32 + (v33 - v32) * v34;
end;
local function v45()
    -- upvalues: v6 (ref), v8 (ref), v10 (ref), v11 (ref), v9 (ref)
    if not v6:get() then
        v8:visibility(false);
        for _, v37 in pairs(v10) do
            if v37.allow_switch then
                v37.allow_switch:visibility(false);
            end;
            v37.yaw_slider:visibility(false);
            v37.left_yaw_slider:visibility(false);
            v37.right_yaw_slider:visibility(false);
            v37.body_yaw_switch:visibility(false);
            v37.body_type_combo:visibility(false);
            v37.body_yaw_limit:visibility(false);
            v37.random_slider123:visibility(false);
            v37.delay_slider:visibility(false);
            v37.delay_type:visibility(false);
            v37.delay_random:visibility(false);
            v37.yaw_jit_type:visibility(false);
            v37.jitslider:visibility(false);
            if v37.defensive_snap_switch then
                v37.defensive_snap_switch:visibility(false);
                v37.defensive_pitch_combo:visibility(false);
                v37.pitch_slider:visibility(false);
                v37.pitch_slider_1:visibility(false);
                v37.pitch_slider_2:visibility(false);
                v37.pitch_sway_slider:visibility(false);
            end;
        end;
        return;
    else
        v8:visibility(true);
        local v38 = v9[v11:get()];
        for v39, v40 in pairs(v10) do
            local v41 = v39 == v38;
            local v42 = v39 == "global" or v40.allow_switch and v40.allow_switch:get();
            if v40.allow_switch then
                v40.allow_switch:visibility(v41);
            end;
            v40.yaw_slider:visibility(v41 and v42);
            v40.left_yaw_slider:visibility(v41 and v42);
            v40.right_yaw_slider:visibility(v41 and v42);
            v40.exploit:visibility(v41 and v42);
            v40.body_yaw_switch:visibility(v41 and v42);
            v40.body_type_combo:visibility(v41 and v42);
            v40.random_slider123:visibility(v41 and v42);
            v40.body_yaw_limit:visibility(v41 and v42);
            v40.delay_type:visibility(v41 and v42);
            v40.delay_slider:visibility(v41 and v42);
            v40.delay_random:visibility(v41 and v42);
            v40.yaw_jit_type:visibility(v41 and v42);
            v40.jitslider:visibility(v41 and v42);
            if v40.defensive_snap_switch then
                v40.defensive_snap_switch:visibility(v41 and v42);
                v40.defensive_pitch_combo:visibility(v41 and v42);
                local v43 = v40.defensive_pitch_combo:get();
                v40.pitch_slider:visibility(false);
                v40.pitch_slider_1:visibility(false);
                v40.pitch_slider_2:visibility(false);
                v40.pitch_sway_slider:visibility(false);
                if v43 == "custom" then
                    v40.pitch_slider:visibility(v41 and v42);
                elseif v43 == "switch" or v43 == "random" then
                    v40.pitch_slider_1:visibility(v41 and v42);
                    v40.pitch_slider_2:visibility(v41 and v42);
                elseif v43 == "sway" then
                    v40.pitch_sway_slider:visibility(v41 and v42);
                    v40.pitch_slider_1:visibility(v41 and v42);
                    v40.pitch_slider_2:visibility(v41 and v42);
                end;
                v40.defensive_yaw_combo:visibility(v41 and v42);
                local v44 = v40.defensive_yaw_combo:get();
                v40.yaw_custom_slider:visibility(false);
                v40.yaw_spin_slider:visibility(false);
                v40.yaw_spin_random_slider:visibility(false);
                v40.yaw_jitter_left_slider:visibility(false);
                v40.yaw_jitter_right_slider:visibility(false);
                v40.defensive_aa_yaw_exploit_range:visibility(false);
                v40.defensive_aa_yaw_exploit_speed:visibility(false);
                if v44 == "custom" then
                    v40.yaw_custom_slider:visibility(v41 and v42);
                elseif v44 == "spin" then
                    v40.yaw_spin_slider:visibility(v41 and v42);
                    v40.yaw_spin_random_slider:visibility(v41 and v42);
                elseif v44 == "jitter" then
                    v40.yaw_jitter_left_slider:visibility(v41 and v42);
                    v40.yaw_jitter_right_slider:visibility(v41 and v42);
                elseif v44 == "all the sides" then
                    v40.defensive_aa_yaw_exploit_range:visibility(v41 and v42);
                    v40.defensive_aa_yaw_exploit_speed:visibility(v41 and v42);
                elseif v44 == "distortion" then
                    v40.defensive_aa_yaw_exploit_range:visibility(v41 and v42);
                    v40.defensive_aa_yaw_exploit_speed:visibility(v41 and v42);
                end;
            end;
        end;
        return;
    end;
end;
for _, v47 in ipairs(v9) do
    v10[v47] = {
        allow_switch = v47 ~= "global" and v7:switch("enable " .. v47):visibility(false):set_callback(function()
            -- upvalues: v45 (ref)
            v45();
        end) or nil, 
        yaw_slider = v7:slider("yaw", -180, 180, 0):visibility(false), 
        random_slider123 = v7:slider("randomize yaw", 0, 100, 0):visibility(false), 
        yaw_jit_type = v7:combo("jitter", "off", "center", "skitter", "offset"):visibility(false), 
        body_yaw_switch = v7:switch("body yaw"):visibility(false)
    };
    local v48 = v10[v47].yaw_slider:create();
    v10[v47].left_yaw_slider = v48:slider("left yaw", -180, 180, 0):visibility(false);
    v10[v47].right_yaw_slider = v48:slider("right yaw", -180, 180, 0):visibility(false);
    v10[v47].exploit = v48:switch("flick exploit"):visibility(false);
    local v49 = v10[v47].body_yaw_switch:create();
    v10[v47].body_type_combo = v49:combo("body yaw type", {
        [1] = "left", 
        [2] = "right", 
        [3] = "jitter"
    }):visibility(false);
    v10[v47].body_yaw_limit = v49:slider("body yaw limit", 0, 60, 0):visibility(false);
    v10[v47].delay_type = v49:combo("delay jitter type", "layer", "counter ( WIP )"):visibility(false):tooltip("Layer is currently the better option, so if you want good delay jitter, select layer.");
    v10[v47].delay_slider = v49:slider("delay", 1, 10, 1):visibility(false);
    v10[v47].delay_random = v49:slider("randomize delay", 0, 10, 0):visibility(false);
    local v50 = v10[v47].yaw_jit_type:create();
    v10[v47].jitslider = v50:slider("jitter value", -180, 180, 0):visibility(false);
    if v47 ~= "fakelag" then
        v10[v47].defensive_snap_switch = v7:switch("defensive snap"):visibility(false);
        local v51 = v10[v47].defensive_snap_switch:create();
        v10[v47].defensive_break_combo = v51:combo("break lc", "on peek", "always");
        v10[v47].defensive_pitch_combo = v51:combo("pitch", {
            [1] = "down", 
            [2] = "up", 
            [3] = "custom", 
            [4] = "random", 
            [5] = "switch", 
            [6] = "sway"
        }):visibility(false):set_callback(function()
            -- upvalues: v45 (ref)
            v45();
        end);
        v10[v47].pitch_slider = v51:slider("pitch", -89, 89, 0):visibility(false);
        v10[v47].pitch_slider_1 = v51:slider("1st pitch", -89, 89, 0):visibility(false);
        v10[v47].pitch_slider_2 = v51:slider("2nd pitch", -89, 89, 0):visibility(false);
        v10[v47].pitch_sway_slider = v51:slider("sway shift", 1, 10, 1):visibility(false);
        v10[v47].defensive_yaw_combo = v51:combo("yaw", {
            [1] = "custom", 
            [2] = "spin", 
            [3] = "random", 
            [4] = "sideways", 
            [5] = "jitter", 
            [6] = "all the sides", 
            [7] = "distortion"
        }):visibility(false):set_callback(function()
            -- upvalues: v45 (ref)
            v45();
        end);
        v10[v47].yaw_custom_slider = v51:slider("custom value", -180, 180, 0):visibility(false);
        v10[v47].yaw_spin_slider = v51:slider("spin speed", 0, 100, 0):visibility(false);
        v10[v47].yaw_spin_random_slider = v51:slider("randomize spin", 0, 100, 0):visibility(false);
        v10[v47].yaw_jitter_left_slider = v51:slider("jitter left", -180, 180, 0):visibility(false);
        v10[v47].yaw_jitter_right_slider = v51:slider("jitter right", -180, 180, 0):visibility(false);
        v10[v47].defensive_aa_yaw_exploit_range = v51:slider("range", 1, 180, 0):visibility(false);
        v10[v47].defensive_aa_yaw_exploit_speed = v51:slider("speed", 1, 10, 1):visibility(false);
    end;
end;
v6:set_callback(v45);
v11:set_callback(v45);
v45();
local function v52()
    -- upvalues: v6 (ref)
    if v6:get() then
        ui.find("Aimbot", "Anti Aim", "Angles", "Enabled"):override(true);
    else
        ui.find("Aimbot", "Anti Aim", "Angles", "Enabled"):override(false);
    end;
end;
v6:set_callback(v52);
events.createmove:set(v52);
local v53 = 0;
local v54 = true;
local v55 = 0;
local function v64(v56, v57, v58, v59)
    -- upvalues: v6 (ref), v53 (ref), v54 (ref), v55 (ref)
    if not v6:get() then
        return;
    else
        local v60 = entity.get_local_player();
        if not v60 or not v60:is_alive() or not globals.is_connected then
            return;
        else
            if v53 == nil then
                v53 = 0;
            end;
            local v61 = math.max(1, v58);
            local v62 = 0;
            local v63 = 0;
            if v59 == "layer" then
                if globals.choked_commands == 0 then
                    v53 = v53 + 1;
                    if v53 % v61 == 0 then
                        v54 = not v54;
                    end;
                end;
                if v54 then
                    v62 = v56;
                    v63 = 1;
                else
                    v62 = v57;
                    v63 = 2;
                end;
            elseif v59 == "counter" then
                v53 = v53 + 1;
                if v53 % v61 == 0 then
                    v54 = not v54;
                    v55 = v55 + 1;
                end;
                if v54 then
                    v62 = v56;
                    v63 = 1;
                else
                    v62 = v57;
                    v63 = 2;
                end;
            end;
            return v62, v63;
        end;
    end;
end;
local function v71()
    -- upvalues: l_MTools_0 (ref)
    l_MTools_0.AntiAims.Condition.Update();
    local v65 = entity.get_local_player();
    if not v65 or not v65:is_alive() then
        return;
    else
        local l_m_vecVelocity_0 = v65.m_vecVelocity;
        if not l_m_vecVelocity_0 then
            return;
        else
            local l_x_0 = l_m_vecVelocity_0.x;
            local l_y_0 = l_m_vecVelocity_0.y;
            local v69 = math.sqrt(l_x_0 ^ 2 + l_y_0 ^ 2);
            local v70 = l_MTools_0.AntiAims.Condition:Get();
            if v70 == "C" and v69 > 13 then
                return "CR";
            else
                return v70;
            end;
        end;
    end;
end;
local function v88()
    -- upvalues: v6 (ref), l_MTools_0 (ref), v71 (ref), v10 (ref), v64 (ref)
    if not v6:get() then
        return;
    else
        l_MTools_0.AntiAims.Condition.Update();
        local v72 = v71();
        local v73 = entity.get_local_player();
        if not v73 or not v73:is_alive() or not globals.is_connected then
            left_yaw = 0;
            right_yaw = 0;
            bodyen = false;
            return;
        else
            local v74 = nil;
            if v72 == "S" then
                v74 = v10.stand;
            elseif v72 == "A" then
                v74 = v10.air;
            elseif v72 == "AC" then
                v74 = v10.airduck;
            elseif v72 == "W" then
                v74 = v10.walk;
            elseif v72 == "C" then
                v74 = v10.duck;
            elseif v72 == "SW" then
                v74 = v10.slowwalk;
            elseif v72 == "CR" then
                v74 = v10.duckrun;
            elseif v72 == "NE" then
                v74 = v10.fakelag;
            end;
            local v75;
            if v74 then
                v75 = v74.allow_switch and v74.allow_switch:get();
            else
                v75 = v74;
            end;
            if not v75 then
                v74 = v10.global;
            end;
            local v76 = v74.yaw_slider:get();
            local v77 = v74.left_yaw_slider:get();
            local v78 = v74.right_yaw_slider:get();
            local v79 = v74.delay_slider:get();
            local v80 = v74.delay_random:get();
            local v81 = v74.random_slider123:get();
            local v82 = v74.yaw_jit_type:get();
            local v83 = v74.jitslider:get();
            local v84 = v74.delay_type:get();
            local v85, v86 = v64(v77 + math.random(0, v81) + v76, v78 - math.random(0, v81) + v76, v79 + math.random(0, v80), v84);
            ui.find("Aimbot", "Anti Aim", "Angles", "Yaw", "Offset"):set(v85);
            if v74.body_yaw_switch:get() then
                ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw"):set(true);
                ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw", "Left Limit"):set(v74.body_yaw_limit:get());
                ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw", "Right Limit"):set(v74.body_yaw_limit:get());
            else
                ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw"):set(false);
            end;
            if v82 == "off" then
                ui.find("Aimbot", "Anti Aim", "Angles", "Yaw Modifier"):override("Disabled");
            elseif v82 == "center" then
                ui.find("Aimbot", "Anti Aim", "Angles", "Yaw Modifier"):override("Center");
            elseif v82 == "skitter" then
                ui.find("Aimbot", "Anti Aim", "Angles", "Yaw Modifier"):override("3-Way");
            elseif v82 == "offset" then
                ui.find("Aimbot", "Anti Aim", "Angles", "Yaw Modifier"):override("Offset");
            end;
            ui.find("Aimbot", "Anti Aim", "Angles", "Yaw Modifier", "Offset"):override(v83);
            ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw", "Options"):override("");
            ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw", "Freestanding"):override("Peek Fake");
            local v87 = v74.body_type_combo:get();
            if v87 == "jitter" then
                ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw", "Inverter"):override(v86 == 1);
            elseif v87 == "left" then
                ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw", "Inverter"):override(true);
            elseif v87 == "right" then
                ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw", "Inverter"):override(false);
            end;
            return;
        end;
    end;
end;
defense_system = {
    current_command = 0, 
    max_tick_base = 0, 
    ticks_count = 0, 
    is_defensive = 0
};
update_defensive_ticks = function(v89)
    defense_system.current_command = v89.command_number;
    local v90 = entity.get_local_player();
    if not v90 or not v90:is_alive() then
        return 0;
    else
        local l_tickcount_0 = globals.tickcount;
        local v92 = v90.m_nTickBase or 0;
        local v93 = v92 < l_tickcount_0;
        if math.abs(v92 - defense_system.max_tick_base) > 64 and v93 then
            defense_system.max_tick_base = 0;
        end;
        if defense_system.max_tick_base < v92 then
            defense_system.max_tick_base = v92;
        elseif v92 < defense_system.max_tick_base then
            defense_system.ticks_count = v93 and math.min(14, math.max(0, defense_system.max_tick_base - v92 - 1)) or 0;
        end;
        defense_system.is_defensive = defense_system.ticks_count > 0 and 1 or 0;
        return;
    end;
end;
events.createmove:set(function(v94)
    update_defensive_ticks(v94);
end);
local function v95()
    if defense_system.is_defensive == 0 then
        return;
    else
        if defense_system.is_defensive == 1 then
            ui.find("Aimbot", "Anti Aim", "Angles", "Yaw", "Offset"):override(0);
        end;
        return;
    end;
end;
local function v101(v96, v97, v98)
    local l_curtime_0 = globals.curtime;
    local v100 = math.sin(l_curtime_0 * v98) * 0.5 + 0.5;
    return v96 + (v97 - v96) * v100;
end;
local function v106()
    -- upvalues: l_MTools_0 (ref), v71 (ref), v10 (ref)
    local v102 = entity.get_local_player();
    if not v102 or not v102:is_alive() or not globals.is_connected then
        return;
    else
        l_MTools_0.AntiAims.Condition.Update();
        local v103 = v71();
        local v104 = nil;
        if v103 == "S" then
            v104 = v10.stand;
        elseif v103 == "A" then
            v104 = v10.air;
        elseif v103 == "AC" then
            v104 = v10.airduck;
        elseif v103 == "W" then
            v104 = v10.walk;
        elseif v103 == "C" then
            v104 = v10.duck;
        elseif v103 == "SW" then
            v104 = v10.slowwalk;
        elseif v103 == "CR" then
            v104 = v10.duckrun;
        elseif v103 == "NE" then
            v104 = v10.fakelag;
        end;
        local v105;
        if v104 then
            v105 = v104.allow_switch and v104.allow_switch:get();
        else
            v105 = v104;
        end;
        if not v105 then
            v104 = v10.global;
        end;
        if v104 and v104.defensive_snap_switch and v104.defensive_snap_switch:get() then
            ui.find("Aimbot", "Anti Aim", "Angles", "Yaw", "Hidden"):override(true);
            if v104.defensive_break_combo:get() == "on peek" then
                ui.find("Aimbot", "Ragebot", "Main", "Double Tap", "Lag Options"):override("On Peek");
            elseif v104.defensive_break_combo:get() == "always" then
                ui.find("Aimbot", "Ragebot", "Main", "Double Tap", "Lag Options"):override("Always On");
            else
                ui.find("Aimbot", "Ragebot", "Main", "Double Tap", "Lag Options"):override("On Peek");
            end;
        else
            ui.find("Aimbot", "Anti Aim", "Angles", "Yaw", "Hidden"):override(false);
            ui.find("Aimbot", "Ragebot", "Main", "Double Tap", "Lag Options"):override("On Peek");
        end;
        return;
    end;
end;
local function v121()
    -- upvalues: l_MTools_0 (ref), v71 (ref), v10 (ref), v101 (ref)
    local v107 = entity.get_local_player();
    if not v107 or not v107:is_alive() or not globals.is_connected then
        return;
    else
        l_MTools_0.AntiAims.Condition.Update();
        local v108 = v71();
        local v109 = nil;
        if v108 == "S" then
            v109 = v10.stand;
        elseif v108 == "A" then
            v109 = v10.air;
        elseif v108 == "AC" then
            v109 = v10.airduck;
        elseif v108 == "W" then
            v109 = v10.walk;
        elseif v108 == "C" then
            v109 = v10.duck;
        elseif v108 == "SW" then
            v109 = v10.slowwalk;
        elseif v108 == "CR" then
            v109 = v10.duckrun;
        elseif v108 == "NE" then
            v109 = v10.fakelag;
        end;
        local v110;
        if v109 then
            v110 = v109.allow_switch and v109.allow_switch:get();
        else
            v110 = v109;
        end;
        if not v110 then
            v109 = v10.global;
        end;
        if not v109 or not v109.defensive_snap_switch or not v109.defensive_snap_switch:get() then
            return;
        else
            local v111 = v109.defensive_pitch_combo:get();
            if v111 == "down" then
                rage.antiaim:override_hidden_pitch(89);
            elseif v111 == "up" then
                rage.antiaim:override_hidden_pitch(-89);
            elseif v111 == "custom" then
                local v112 = v109.pitch_slider:get();
                rage.antiaim:override_hidden_pitch(v112);
            elseif v111 == "switch" then
                if globals.tickcount % 12 > 1 then
                    local v113 = v109.pitch_slider_1:get();
                    rage.antiaim:override_hidden_pitch(v113);
                else
                    local v114 = v109.pitch_slider_2:get();
                    rage.antiaim:override_hidden_pitch(v114);
                end;
            elseif v111 == "sway" then
                local v115 = v109.pitch_slider_1:get();
                local v116 = v109.pitch_slider_2:get();
                local v117 = v109.pitch_sway_slider:get();
                local v118 = v101(v115, v116, v117);
                rage.antiaim:override_hidden_pitch(v118);
            elseif v111 == "random" then
                local v119 = v109.pitch_slider_1:get();
                local v120 = v109.pitch_slider_2:get();
                rage.antiaim:override_hidden_pitch(math.random(v119, v120));
            end;
            return;
        end;
    end;
end;
local v122 = 0;
local function v128(v123, v124)
    -- upvalues: v122 (ref)
    local v125 = entity.get_local_player();
    if not v125 or not v125:is_alive() or not globals.is_connected then
        return;
    else
        local l_frametime_0 = globals.frametime;
        local v127 = 360 * (v123 / 100) * 3;
        v122 = v122 + v127 * l_frametime_0;
        if v124 > 0 then
            v122 = v122 + math.random(-v124, v124);
        end;
        if v122 > 180 then
            v122 = v122 - 360;
        elseif v122 < -180 then
            v122 = v122 + 360;
        end;
        return v122;
    end;
end;
local function v147()
    -- upvalues: l_MTools_0 (ref), v71 (ref), v10 (ref), v128 (ref)
    local v129 = entity.get_local_player();
    if not v129 or not v129:is_alive() or not globals.is_connected then
        return;
    else
        l_MTools_0.AntiAims.Condition.Update();
        local v130 = v71();
        local v131 = nil;
        if v130 == "S" then
            v131 = v10.stand;
        elseif v130 == "A" then
            v131 = v10.air;
        elseif v130 == "AC" then
            v131 = v10.airduck;
        elseif v130 == "W" then
            v131 = v10.walk;
        elseif v130 == "C" then
            v131 = v10.duck;
        elseif v130 == "SW" then
            v131 = v10.slowwalk;
        elseif v130 == "CR" then
            v131 = v10.duckrun;
        elseif v130 == "NE" then
            v131 = v10.fakelag;
        end;
        local v132;
        if v131 then
            v132 = v131.allow_switch and v131.allow_switch:get();
        else
            v132 = v131;
        end;
        if not v132 then
            v131 = v10.global;
        end;
        if not v131 or not v131.defensive_snap_switch or not v131.defensive_snap_switch:get() then
            return;
        else
            local v133 = v131.defensive_yaw_combo:get();
            if v133 == "random" then
                local v134 = math.random(-180, 180);
                rage.antiaim:override_hidden_yaw_offset(v134);
            elseif v133 == "sideways" then
                if globals.tickcount % 6 > 1 then
                    rage.antiaim:override_hidden_yaw_offset(90);
                else
                    rage.antiaim:override_hidden_yaw_offset(-90);
                end;
            elseif v133 == "custom" then
                local v135 = v131.yaw_custom_slider:get();
                rage.antiaim:override_hidden_yaw_offset(v135);
            elseif v133 == "jitter" then
                if globals.tickcount % 6 > 1 then
                    local v136 = v131.yaw_jitter_left_slider:get();
                    rage.antiaim:override_hidden_yaw_offset(v136);
                else
                    local v137 = v131.yaw_jitter_right_slider:get();
                    rage.antiaim:override_hidden_yaw_offset(v137);
                end;
            elseif v133 == "spin" then
                local v138 = v131.yaw_spin_slider:get();
                local v139 = v131.yaw_spin_random_slider:get();
                local v140 = v128(v138, v139);
                rage.antiaim:override_hidden_yaw_offset(v140);
            elseif v133 == "all the sides" then
                local v141 = v131.defensive_aa_yaw_exploit_speed:get();
                local v142 = v131.defensive_aa_yaw_exploit_range:get();
                local v143 = -math.sin(globals.curtime * v141) * v142 * 4;
                rage.antiaim:override_hidden_yaw_offset(v143);
            elseif v133 == "distortion" then
                local v144 = v131.defensive_aa_yaw_exploit_speed:get();
                local v145 = v131.defensive_aa_yaw_exploit_range:get();
                local v146 = -math.sin(globals.curtime * v144) * v145;
                rage.antiaim:override_hidden_yaw_offset(v146);
            end;
            return;
        end;
    end;
end;
local _ = 0;
local v149 = 0;
local function v156()
    -- upvalues: v149 (ref), l_MTools_0 (ref), v16 (ref)
    local v150 = entity.get_local_player();
    if not v150 or not v150:is_alive() then
        v149 = 0;
        return;
    else
        local v151 = v150:get_player_weapon();
        if not v151 then
            v149 = 0;
            return;
        else
            local v152 = v151:get_classname();
            local v153 = l_MTools_0.AntiAims.Condition:Get();
            local v154 = v152 == "CKnife" or v152:lower():find("knife");
            local v155 = v152 == "CWeaponTaser";
            if v154 and v16:get("knife") and v153 == "AC" then
                ui.find("Aimbot", "Anti Aim", "Angles", "Pitch"):override("Down");
                ui.find("Aimbot", "Anti Aim", "Angles", "Yaw"):override("Backward");
                ui.find("Aimbot", "Anti Aim", "Angles", "Yaw", "Offset"):override(0);
                ui.find("Aimbot", "Anti Aim", "Angles", "Yaw", "Hidden"):override(false);
                ui.find("Aimbot", "Ragebot", "Main", "Double Tap", "Lag Options"):override("On Peek");
                rage.antiaim:inverter(true);
                v149 = 1;
            elseif v155 and v16:get("zeus") and v153 == "AC" then
                ui.find("Aimbot", "Anti Aim", "Angles", "Pitch"):override("Down");
                ui.find("Aimbot", "Anti Aim", "Angles", "Yaw"):override("Backward");
                ui.find("Aimbot", "Anti Aim", "Angles", "Yaw", "Offset"):override(0);
                ui.find("Aimbot", "Anti Aim", "Angles", "Yaw", "Hidden"):override(false);
                ui.find("Aimbot", "Ragebot", "Main", "Double Tap", "Lag Options"):override("On Peek");
                rage.antiaim:inverter(true);
                v149 = 1;
            else
                v149 = 0;
            end;
            return;
        end;
    end;
end;
local function v162(v157)
    -- upvalues: v17 (ref)
    local v158 = entity.get_local_player();
    if v158 == nil or not v158:is_alive() or not globals.is_connected then
        return;
    else
        local l_m_iTeamNum_0 = v158.m_iTeamNum;
        local l_m_bInBombZone_0 = v158.m_bInBombZone;
        local v161 = v158.m_hActiveWeapon and v158.m_hActiveWeapon:get_classname() == "CC4";
        if l_m_bInBombZone_0 and l_m_iTeamNum_0 == 2 and not v161 and v17:get("bombsite e-fix") then
            v157.in_use = false;
        end;
        return;
    end;
end;
local function v164(v163)
    -- upvalues: v162 (ref)
    v162(v163);
end;
local v165 = {};
local v166 = 0.095;
local function v171(v167, v168, v169, v170)
    -- upvalues: v166 (ref), v165 (ref), v35 (ref)
    if not v169 then
        v169 = v166;
    end;
    if v165[v167] == nil then
        v165[v167] = v170 or 0;
    end;
    v165[v167] = v35(v165[v167], v168, v169);
    return v165[v167];
end;
local function v174()
    -- upvalues: v26 (ref), v171 (ref)
    if entity.get_local_player() == nil then
        return;
    else
        if v26:get() == 59 then
            cvar.r_aspectratio:float(0);
        else
            local v172 = v26:get() / 100;
            local v173 = v171("aspect_ratio", v172, 0.095);
            cvar.r_aspectratio:float(v173);
        end;
        return;
    end;
end;
events.render:set(v174);
events.shutdown(function()
    cvar.r_aspectratio:float(0);
end);
grenade_release = function(v175)
    -- upvalues: v18 (ref), v20 (ref)
    local v176 = entity.get_local_player();
    if v176 == nil or not v176:is_alive() then
        return;
    else
        local v177 = v176:get_player_weapon();
        if v177 == nil then
            return;
        else
            local v178 = v177:get_weapon_index();
            if v178 ~= 44 and v178 ~= 46 then
                return;
            else
                if v18:get() and v177.m_bPinPulled and v175.damage > v20:get() then
                    utils.console_exec("+attack");
                    utils.execute_after(0.1, function()
                        utils.console_exec("-attack");
                    end);
                end;
                return;
            end;
        end;
    end;
end;
events.grenade_prediction:set(grenade_release);
table_contains = function(v179, v180)
    for _, v182 in pairs(v179) do
        if v182 == v180 then
            return true;
        end;
    end;
    return false;
end;
local function v186()
    -- upvalues: v14 (ref), v71 (ref), v15 (ref)
    if not v14:get() then
        ui.find("Aimbot", "Anti Aim", "Angles", "Freestanding"):override(false);
        ui.find("Aimbot", "Anti Aim", "Angles", "Freestanding", "Disable Yaw Modifiers"):override(false);
        return;
    else
        local v183 = v71();
        local v184 = v15:get();
        if not v184 then
            return;
        else
            local v185 = false;
            if v183 == "S" then
                v185 = table_contains(v184, "stand");
            elseif v183 == "A" then
                v185 = table_contains(v184, "air");
            elseif v183 == "AC" then
                v185 = table_contains(v184, "airduck");
            elseif v183 == "W" then
                v185 = table_contains(v184, "walk");
            elseif v183 == "C" then
                v185 = table_contains(v184, "duck");
            elseif v183 == "SW" then
                v185 = table_contains(v184, "slowwalk");
            elseif v183 == "CR" then
                v185 = table_contains(v184, "duckrun");
            elseif v183 == "NE" then
                v185 = table_contains(v184, "fakelag");
            end;
            if v185 then
                ui.find("Aimbot", "Anti Aim", "Angles", "Freestanding"):override(false);
                ui.find("Aimbot", "Anti Aim", "Angles", "Freestanding", "Disable Yaw Modifiers"):override(false);
                return;
            else
                ui.find("Aimbot", "Anti Aim", "Angles", "Freestanding"):override(true);
                ui.find("Aimbot", "Anti Aim", "Angles", "Freestanding", "Disable Yaw Modifiers"):override(true);
                return;
            end;
        end;
    end;
end;
local function v187()
    -- upvalues: v13 (ref)
    if v13:get() == "off" then
        return;
    else
        if v13:get() == "left" then
            ui.find("Aimbot", "Anti Aim", "Angles", "Yaw Modifier", "Offset"):override(0);
            ui.find("Aimbot", "Ragebot", "Main", "Double Tap", "Lag Options"):override("On Peek");
            ui.find("Aimbot", "Anti Aim", "Angles", "Yaw", "Offset"):set(-90);
        end;
        if v13:get() == "right" then
            ui.find("Aimbot", "Ragebot", "Main", "Double Tap", "Lag Options"):override("On Peek");
            ui.find("Aimbot", "Anti Aim", "Angles", "Yaw Modifier", "Offset"):override(0);
            ui.find("Aimbot", "Anti Aim", "Angles", "Yaw", "Offset"):set(90);
        end;
        if v13:get() == "forward" then
            ui.find("Aimbot", "Anti Aim", "Angles", "Yaw Modifier", "Offset"):override(0);
            ui.find("Aimbot", "Ragebot", "Main", "Double Tap", "Lag Options"):override("On Peek");
            ui.find("Aimbot", "Anti Aim", "Angles", "Yaw", "Offset"):set(-180);
        end;
        return;
    end;
end;
local v188 = {
    [1] = "\225\180\155\209\139 \225\180\155\225\180\128\225\180\139 \225\180\168\225\180\167\208\190\209\133, \209\135\225\180\155\208\190 \208\180\225\180\128\208\182\225\180\135 \225\180\155\202\153\208\190\208\185 \225\180\168\225\180\139 \225\180\169\225\180\135\201\175\208\184\225\180\167 \225\180\168\225\180\135\225\180\169\225\180\135\208\183\225\180\128\225\180\166\225\180\169\209\131\208\183\208\184\225\180\155\209\140\225\180\132\209\143", 
    [2] = "\225\180\132 \225\180\155\202\153\208\190\208\184\202\141\208\184 \225\180\132\225\180\139\208\184\225\180\167\225\180\167\225\180\128\202\141\208\184 \225\180\155\225\180\135\208\177\225\180\135 \225\180\167\209\131\209\135\201\175\225\180\135 \208\184\225\180\166\225\180\169\225\180\128\225\180\155\209\140 \202\153 \225\180\139\225\180\169\225\180\135\225\180\132\225\180\155\208\184\225\180\139\208\184-\208\189\208\190\225\180\167\208\184\225\180\139\208\184!", 
    [3] = "\240\157\149\139\240\157\149\170 \240\157\149\156\240\157\149\146\240\157\149\156 \240\157\149\142\240\157\149\154-\240\157\148\189\240\157\149\154 \240\157\149\167 \240\157\149\158\240\157\149\150\240\157\149\165\240\157\149\163\240\157\149\160 \226\128\148 \240\157\149\161\240\157\149\160\240\157\149\164\240\157\149\165\240\157\149\160\240\157\149\170\240\157\149\146\240\157\149\159\240\157\149\159\240\157\149\160 \240\157\149\163\240\157\149\146\240\157\149\171\240\157\149\163\240\157\149\170\240\157\149\167\240\157\149\146\240\157\149\150\240\157\149\164\240\157\149\153\240\157\149\164\240\157\149\170\240\157\149\146!", 
    [4] = "\240\157\153\143\240\157\153\171\240\157\153\164\240\157\153\158 \240\157\153\169\240\157\153\150\240\157\153\160\240\157\153\169\240\157\153\158\240\157\153\160\240\157\153\158 \240\157\153\163\240\157\153\150\240\157\153\168\240\157\153\169\240\157\153\164\240\157\153\161\240\157\153\160\240\157\153\164 \240\157\153\170\240\157\153\168\240\157\153\169\240\157\153\150\240\157\153\167\240\157\153\154\240\157\153\161\240\157\153\158, \240\157\153\152\240\157\153\157\240\157\153\169\240\157\153\164 \240\157\153\158\240\157\153\157 \240\157\153\162\240\157\153\164\240\157\153\175\240\157\153\157\240\157\153\163\240\157\153\164 \240\157\153\171\240\157\153\174\240\157\153\168\240\157\153\169\240\157\153\150\240\157\153\171\240\157\153\158\240\157\153\169 \240\157\153\171 \240\157\153\162\240\157\153\170\240\157\153\175\240\157\153\154\240\157\153\154", 
    [5] = "\226\153\161\240\157\148\151\240\157\148\182 \240\157\148\168\240\157\148\158\240\157\148\168 \240\157\148\159\240\157\148\158\240\157\148\164 \240\157\148\179 \240\157\148\168\240\157\148\172\240\157\148\161\240\157\148\162 \226\128\148 \240\157\148\171\240\157\148\166\240\157\148\168\240\157\148\177\240\157\148\172 \240\157\148\171\240\157\148\162 \240\157\148\165\240\157\148\172\240\157\148\160\240\157\148\165\240\157\148\162\240\157\148\177 \240\157\148\176 \240\157\148\177\240\157\148\172\240\157\148\159\240\157\148\172\240\157\148\182 \240\157\148\166\240\157\148\170\240\157\148\162\240\157\148\177 \240\157\148\161\240\157\148\162\240\157\148\169\240\157\148\172\226\153\161", 
    [6] = "\226\157\128S\205\154 \205\154t\205\154o\205\154b\205\154o\205\154y\205\154 \205\154d\205\154a\205\154z\205\154h\205\154e\205\154 \205\154u\205\154r\205\154o\205\154v\205\154e\205\154n\205\154 \205\154s\205\154l\205\154o\205\154z\205\154h\205\154n\205\154o\205\154s\205\154t\205\154i\205\154 \205\154p\205\154a\205\154d\205\154a\205\154e\205\154t do nulya\205\154\226\157\128", 
    [7] = "\226\150\132\239\184\187\227\131\135\200\190\201\143 \196\171\234\158\161\201\141\226\177\165\196\147\234\158\169\196\167 \226\177\166\226\177\165\210\159, \198\128\225\181\190\196\145\226\177\166\234\157\139 \225\181\190 \226\177\166\196\147\198\128\201\143\226\177\165 \234\157\159 \234\158\161\234\157\139\197\130\234\157\139\234\157\159\196\147 \234\158\165\196\147 \197\130\234\157\139\234\158\165\196\147\197\130\201\143\226\149\144\226\149\144\226\148\129\228\184\128", 
    [8] = "E\205\155s\205\155l\205\155i\205\155 \205\155b\205\155y\205\155 \205\155t\205\155v\205\155o\205\155i\205\155 \205\155f\205\155r\205\155a\205\155g\205\155i\205\155 \205\155b\205\155y\205\155l\205\155i\205\155 \205\155v\205\155a\205\155l\205\155y\205\155u\205\155toy, u\205\155 \205\155t\205\155eby\205\155a n\205\155e\205\155 \205\155h\205\155v\205\155a\205\155t\205\155i\205\155l\205\155o\205\155 \205\155b\205\155y na p\205\155r\205\155o\205\155e\205\155z\205\155d v \205\155a\205\155v\205\155to\205\155b\205\155u\205\155s\205\155e\205\155"
};
events.player_death:set(function(v189)
    -- upvalues: v21 (ref), v188 (ref)
    if not v21:get(true) then
        return;
    else
        local v190 = entity.get_local_player();
        if v190 == nil then
            return;
        else
            if entity.get(v189.attacker, true) == v190 then
                local v191 = v188[math.random(#v188)];
                utils.console_exec("say " .. v191);
            end;
            return;
        end;
    end;
end);
ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw", "Inverter"):set(false);
local _ = {};
local v193 = 9;
local v194 = 0.3;
get_throw_toss = function(v195, v196, v197, v198)
    -- upvalues: v35 (ref), v194 (ref)
    local v199 = math.clamp(v196, 15, 750);
    local v200 = math.clamp(v197, 0, 1);
    v199 = v199 * v35(v194, 1, v200);
    return (vector():angles(v195) * v199 - v198):angles();
end;
on_createmove123 = function(v201)
    -- upvalues: v17 (ref), v193 (ref)
    if not v17:get("super toss") then
        return;
    elseif render.camera_angles() ~= v201.view_angles:clone() then
        return;
    else
        local v202 = entity.get_local_player();
        if v202 == nil then
            return;
        else
            local v203 = v202:get_player_weapon();
            if v203 == nil then
                return;
            else
                local v204 = v203:get_weapon_info();
                if v204 == nil then
                    return;
                elseif v204.weapon_type ~= v193 then
                    return;
                elseif globals.curtime - to_time(globals.clock_offset) > v203.m_fThrowTime then
                    return;
                else
                    v201.in_speed = true;
                    v201.view_angles = get_throw_toss(render.camera_angles(), v204.throw_velocity, v203.m_flThrowStrength, v202.m_vecVelocity);
                    return;
                end;
            end;
        end;
    end;
end;
on_grenade_override_view = function(v205)
    -- upvalues: v17 (ref)
    if not v17:get("super toss") then
        return;
    else
        local v206 = entity.get_local_player();
        if v206 == nil then
            return;
        else
            local v207 = v206:get_player_weapon();
            if v207 == nil then
                return;
            else
                local v208 = v207:get_weapon_info();
                if v208 == nil then
                    return;
                else
                    v205.angles = get_throw_toss(v205.angles, v208.throw_velocity, v207.m_flThrowStrength, v205.velocity);
                    return;
                end;
            end;
        end;
    end;
end;
events.grenade_override_view(on_grenade_override_view);
ffi.cdef("    void* __stdcall URLDownloadToFileA(void* LPUNKNOWN, const char* LPCSTR, const char* LPCSTR2, const char* LPCSTR3, int a, int LPBINDSTATUSCALLBACK);\n    void* __stdcall ShellExecuteA(void* hwnd, const char* op, const char* file, const char* params, const char* dir, int show_cmd);\n\n    typedef void*(__thiscall* get_client_entity_t)(void*, int);\n    typedef struct {\n        char  pad_0000[20];\n        int m_nOrder; //0x0014\n        int m_nSequence; //0x0018\n        float m_flPrevCycle; //0x001C\n        float m_flWeight; //0x0020\n        float m_flWeightDeltaRate; //0x0024\n        float m_flPlaybackRate; //0x0028\n        float m_flCycle; //0x002C\n        void *m_pOwner; //0x0030\n        char  pad_0038[4]; //0x0034\n    } animstate_layer_t;\n");
local _ = ffi.typeof("uintptr_t**");
local v210 = utils.get_vfunc("client.dll", "VClientEntityList003", 3, "void*(__thiscall*)(void*, int)");
local v211 = nil;
cat123 = 1;
events.post_update_clientside_animation:set(function()
    -- upvalues: v211 (ref), v210 (ref)
    local v212 = entity.get_local_player();
    local v213 = math.sqrt(v212.m_vecVelocity.x ^ 2 + v212.m_vecVelocity.y ^ 2) > 5;
    local _ = bit.band(v212.m_fFlags, 1) == 0;
    v211 = v210(v212:get_index());
    if cat123 == 1 then
        if legs_jitter.air_combo:get() == "static" then
            v212.m_flPoseParameter[6] = 1;
        elseif legs_jitter.air_combo:get() == "kangaroo" then
            v212.m_flPoseParameter[6] = utils.random_float(0, 1);
        elseif legs_jitter.air_combo:get() == "walking" then
            ffi.cast("animstate_layer_t**", ffi.cast("uintptr_t", v211) + 10640)[0][6].m_flWeight = 1;
        end;
        if legs_jitter.jitter_combo:get() == "flex" then
            ui.find("Aimbot", "Anti Aim", "Misc", "Leg Movement"):override("Walking");
            v212.m_flPoseParameter[7] = utils.random_float(0.5, 1);
        elseif legs_jitter.jitter_combo:get() == "walking" then
            ui.find("Aimbot", "Anti Aim", "Misc", "Leg Movement"):override("Walking");
            v212.m_flPoseParameter[7] = 1;
        elseif legs_jitter.jitter_combo:get() == "static" then
            ui.find("Aimbot", "Anti Aim", "Misc", "Leg Movement"):override("Sliding");
            v212.m_flPoseParameter[0] = 0;
        elseif legs_jitter.jitter_combo:get() == "fast jitter" then
            ui.find("Aimbot", "Anti Aim", "Misc", "Leg Movement"):override("Sliding");
            v212.m_flPoseParameter[0] = utils.random_float(0, 1);
        elseif legs_jitter.jitter_combo:get() == "slow jitter" then
            ui.find("Aimbot", "Anti Aim", "Misc", "Leg Movement"):override("Sliding");
            v212.m_flPoseParameter[0] = globals.tickcount % 4 > 1 and 0.4 or 1;
        end;
        if legs_jitter.walk_combo:get() == "jitter" then
            v212.m_flPoseParameter[9] = utils.random_float(0, 1);
        elseif legs_jitter.walk_combo:get() == "static" then
            v212.m_flPoseParameter[9] = 0;
        elseif legs_jitter.walk_combo:get() == "pirat" then
            v212.m_flPoseParameter[9] = 0.4;
        end;
        if legs_jitter.other_combo:get("earthquake") then
            ffi.cast("animstate_layer_t**", ffi.cast("uintptr_t", v211) + 10640)[0][12].m_flWeight = utils.random_float(0, 1);
        elseif legs_jitter.other_combo:get("move lean") and v213 then
            ffi.cast("animstate_layer_t**", ffi.cast("uintptr_t", v211) + 10640)[0][12].m_flWeight = 1;
        end;
    end;
end);
local v215 = {
    [0] = "generic", 
    [1] = "head", 
    [2] = "chest", 
    [3] = "stomach", 
    [4] = "left arm", 
    [5] = "right arm", 
    [6] = "left leg", 
    [7] = "right leg", 
    [8] = "neck", 
    [9] = "generic", 
    [10] = "gear"
};
local v216 = {};
local v217 = 1;
events.aim_ack:set(function(v218)
    -- upvalues: v28 (ref), v216 (ref), v215 (ref), v217 (ref)
    local _ = entity.get_local_player();
    local l_state_0 = v218.state;
    local v221 = entity.get(v218.target);
    local v222 = "%";
    if v221 == nil then
        return;
    else
        local l_m_iHealth_0 = v221.m_iHealth;
        local v224 = "";
        if v28:get() then
            if v218.state == "spread" then
                v224 = "spread";
            end;
            if v218.state == "death" then
                v224 = "death";
            end;
            if v218.state == "prediction error" then
                v224 = "prediction error";
            end;
            if v218.state == "jitter" then
                v224 = "jitter";
            end;
            if v218.state == "correction" then
                v224 = "?";
            end;
            if v218.state == "lagcomp failure" then
                v224 = "fake lag correction";
            end;
            if l_state_0 == nil then
                v216[#v216 + 1] = {
                    [1] = nil, 
                    [2] = nil, 
                    [3] = 0, 
                    [1] = ("registered shot at %s's %s(%s%s) for %s (aimed: %s for %s, health remain: %s) backtrack: %s"):format(v218.target:get_name(), v215[v218.hitgroup], v218.hitchance, v222, v218.damage, v215[v218.wanted_hitgroup], v218.wanted_damage, l_m_iHealth_0, v218.backtrack), 
                    [2] = globals.tickcount + 255
                };
                print_raw(("lonely [%s] registered shot at %s's %s(%s%s) for %s (aimed: %s for %s, health remain: %s) backtrack: %s"):format(v217, v218.target:get_name(), v215[v218.hitgroup], v218.hitchance, v222, v218.damage, v215[v218.wanted_hitgroup], v218.wanted_damage, l_m_iHealth_0, v218.backtrack));
                if v28:get() then
                    print_dev(("lonely [%s] registered shot at %s's %s(%s%s) for %s (aimed: %s for %s, health remain: %s) backtrack: %s\a"):format(v217, v218.target:get_name(), v215[v218.hitgroup], v218.hitchance, v222, v218.damage, v215[v218.wanted_hitgroup], v218.wanted_damage, l_m_iHealth_0, v218.backtrack));
                end;
            else
                v216[#v216 + 1] = {
                    [1] = nil, 
                    [2] = nil, 
                    [3] = 0, 
                    [1] = ("missed %ss %s (dmg:%s, %s%s) due to %s | backtrack: %s"):format(v218.target:get_name(), v215[v218.wanted_hitgroup], v218.wanted_damage, v218.hitchance, v222, v224, v218.backtrack), 
                    [2] = globals.tickcount + 255
                };
                print_raw(("lonely [%s] missed %ss %s (dmg:%s, %s%s) due to %s | backtrack: %s"):format(v217, v218.target:get_name(), v215[v218.wanted_hitgroup], v218.wanted_damage, v218.hitchance, v222, v224, v218.backtrack));
                if v28:get() then
                    print_dev(("lonely [%s] missed %s`s %s (dmg:%s, %s%s) due to %s | backtrack: %s"):format(v217, v218.target:get_name(), v215[v218.wanted_hitgroup], v218.wanted_damage, v218.hitchance, v222, v224, v218.backtrack));
                end;
            end;
            v217 = v217 == 999 and 1 or v217 + 1;
        end;
        return;
    end;
end);
hit_event = function(v225)
    -- upvalues: v28 (ref), v216 (ref), v217 (ref)
    local v226 = entity.get_local_player();
    local v227 = entity.get(v225.attacker, true);
    local l_weapon_0 = v225.weapon;
    local v229 = "";
    if v28:get() then
        if l_weapon_0 == "hegrenade" then
            v229 = "Exploded";
        end;
        if l_weapon_0 == "inferno" then
            v229 = "Fired";
        end;
        if l_weapon_0 == "knife" then
            v229 = "Knife Hit";
        end;
        if l_weapon_0 == "hegrenade" or l_weapon_0 == "inferno" or l_weapon_0 == "knife" then
            if v226 == v227 then
                local v230 = entity.get(v225.userid, true);
                v216[#v216 + 1] = {
                    [1] = nil, 
                    [2] = nil, 
                    [3] = 0, 
                    [1] = (v229 .. " %s for %d damage (%d health remaining)"):format(v230:get_name(), v225.dmg_health, v225.health), 
                    [2] = globals.tickcount + 250
                };
                print_raw(("lonely [%s] " .. v229 .. " %s for %d damage (%d health remaining)"):format(v217, v230:get_name(), v225.dmg_health, v225.health));
                print_dev(("lonely [%s] " .. v229 .. " %s for %d damage (%d health remaining)"):format(v217, v230:get_name(), v225.dmg_health, v225.health));
            end;
            v217 = v217 == 999 and 1 or v217 + 1;
        end;
    end;
end;
events.player_hurt:set(function(v231)
    hit_event(v231);
end);
local v232 = ffi.load("UrlMon");
local v233 = {};
v233.__index = v233;
v233.download = function(v234, v235)
    -- upvalues: v232 (ref)
    v232.URLDownloadToFileA(nil, v234, v235, 0, 0);
end;
files.create_folder("nl\\lonely");
v233.download("https://github.com/vandalcat/cat/raw/main/small_pixel.ttf", "nl\\lonely\\small_pixel.ttf");
v233.download("https://i.imgur.com/thabXMR.jpeg", "nl\\lonely\\pic.jpeg");
local _ = render.load_font("Verdana", 10, "abd");
local v237 = render.load_font("nl\\lonely\\small_pixel.ttf", 10, "aod");
local _ = 0;
local _ = 60;
local v240 = 0.05;
local v241 = 40;
local v242 = 3;
local _ = 0;
local _ = 0;
local _ = 0;
local _ = 0;
local _ = 0.05;
local function v249()
    local v248 = entity.get_local_player();
    if not v248 or not v248:is_alive() or not globals.is_connected then
        return false;
    else
        return true;
    end;
end;
local function v257(v250, v251, v252)
    -- upvalues: v35 (ref)
    local v253 = v35(v250.r, v251.r, v252);
    local v254 = v35(v250.g, v251.g, v252);
    local v255 = v35(v250.b, v251.b, v252);
    local v256 = v35(v250.a, v251.a, v252);
    return color(v253, v254, v255, v256);
end;
local function v261(v258, v259, v260)
    -- upvalues: v35 (ref)
    return v35(v258, v259, v260);
end;
local _ = 0;
local _ = 0;
local function v265(v264)
    return v264 and v264.m_bIsScoped;
end;
local function _(v266, v267, v268, v269, v270, v271, v272, v273)
    -- upvalues: v261 (ref), v240 (ref), v257 (ref), v241 (ref), v242 (ref), v237 (ref)
    local v274 = ui.find("Aimbot", "Ragebot", "Main", v267):get(true);
    if v273 and v274 then
        v274 = v273();
    end;
    local v275 = v274 and 255 or 85;
    v272 = v261(v272, v275, v240);
    local v276 = v257(v271, v270, v272 / 255);
    render.rect(vector(v268, v269), vector(v268 + v241 / 2, v269 + v242), v276, 0);
    render.text(v237, vector(v268 + v241 / 4 - 5, v269 + 6), color(255, 255, 255, v272), nil, v266);
    return v272;
end;
local v278 = render.load_font("Verdana", 13, "iab");
local v279 = render.load_font("nl\\lonely\\small_pixel.ttf", 11, "ao");
local v280 = 0;
local v281 = 0;
local v282 = 0;
local v283 = 0;
local v284 = 0;
local v285 = {
    [1] = 0, 
    [2] = 0, 
    [3] = 0, 
    [4] = 0, 
    [5] = 0
};
local v286 = ui.find("Aimbot", "Ragebot", "Main", "Double Tap");
local function v316()
    -- upvalues: v29 (ref), v30 (ref), v249 (ref), v278 (ref), v265 (ref), v281 (ref), v35 (ref), l_aim_0 (ref), v280 (ref), v282 (ref), v286 (ref), v283 (ref), v284 (ref), v279 (ref), v285 (ref)
    if not v29:get(true) or v30:get() ~= "recode" then
        return;
    elseif not v249() then
        return;
    else
        local v287 = render.screen_size();
        local v288 = entity.get_local_player();
        local v289 = "lonely\194\176";
        local v290 = render.measure_text(v278, nil, v289);
        local v291 = vector(v287.x / 2 - v290.x / 2, v287.y / 2 + 20);
        local v292 = color(255, 255, 255, 255);
        if v265(v288) then
            local _ = 50;
            v281 = v35(v281, 27, globals.frametime * 8);
        else
            local _ = 100;
            v281 = v35(v281, 0, globals.frametime * 8);
        end;
        local v295 = vector(v291.x + v281, v291.y);
        render.text(v278, v295, v292, nil, v289);
        local v296 = math.abs(l_aim_0.get_desync_delta());
        local v297 = 60;
        local v298 = 100;
        local v299 = 1;
        local v300 = v296 >= 2 and v296 / v297 * v298 or 0;
        v280 = v35(v280, v300, globals.frametime * 8);
        local v301 = v35(v282, v280, globals.frametime * 8);
        local v302 = nil;
        local v303 = nil;
        if v265(v288) then
            v302 = vector(v287.x / 2 + 2, v287.y / 2 + 35);
            v303 = vector(v287.x / 2 + 2 + v301, v287.y / 2 + 35 + v299);
        else
            v302 = vector(v287.x / 2 - v301 / 2, v287.y / 2 + 35);
            v303 = vector(v287.x / 2 + v301 / 2, v287.y / 2 + 35 + v299);
        end;
        local v304 = color(255, 255, 255, 255);
        if v280 >= 2 then
            render.rect(v302, v303, v304, 0);
        end;
        v282 = v301;
        if v286:get(true) then
            if v265(v288) then
                v283 = v35(v283, 10, globals.frametime * 8);
            else
                v283 = v35(v283, 0, globals.frametime * 8);
            end;
            v284 = v35(v284, 255, globals.frametime * 16);
        else
            v284 = v35(v284, 0, globals.frametime * 8);
        end;
        local v305 = "DT";
        local v306 = render.measure_text(v279, nil, v305);
        local v307 = vector(v287.x / 2 - v306.x / 2 + v283 + (v265(v288) and 2 or 0), v287.y / 2 + 40);
        local v308 = color(255, 255, 255, math.floor(v284));
        render.text(v279, v307, v308, nil, v305);
        if v284 > 0 then
            local v309 = rage.exploit:get();
            for v310 = 1, 3 do
                local v311 = v307.x + v306.x + 5 + (v310 - 1.3) * 4;
                local v312 = v307.y + 1.3;
                local v313 = 2;
                local v314 = 10;
                local v315 = color(255, 255, 255, math.floor(v284));
                if v309 == 1 and v310 <= v309 * 5 and v286:get() then
                    if v310 == 1 or v285[v310 - 1] >= 254 then
                        v285[v310] = v35(v285[v310], 255, globals.frametime * 100);
                    end;
                else
                    v285[v310] = v35(v285[v310], 0, globals.frametime * 16);
                end;
                v315 = color(255, 255, 255, math.floor(v285[v310]));
                render.rect(vector(v311, v312 + 1), vector(v311 + v313, v312 + v314), v315, 0);
            end;
        end;
        return;
    end;
end;
events.render:set(v316);
local function v318(v317)
    return ({
        A = "AIR", 
        S = "STAND", 
        C = "DUCK", 
        CR = "DUCK~RUN", 
        NE = "FAKE~LAG", 
        SW = "SLOW", 
        W = "RUN", 
        AC = "AIR~CROUCH"
    })[v317] or "UNKNOWN";
end;
local function v321(v319, v320)
    -- upvalues: v35 (ref)
    return color(v35(128, 255, v319 and 1 or 0), v35(128, 255, v319 and 1 or 0), v35(128, 255, v319 and 1 or 0), v320);
end;
local function v354()
    -- upvalues: v29 (ref), v30 (ref), v249 (ref), v279 (ref), v71 (ref), v318 (ref), v321 (ref)
    if not v29:get(true) or v30:get() ~= "pixel" then
        return;
    elseif not v249() then
        return;
    else
        local v322 = render.screen_size();
        local v323 = v322.x / 2;
        local v324 = v322.y / 2 + 20;
        local v325 = "lonely";
        local v326 = render.measure_text(v279, nil, v325) - 0.04;
        render.text(v279, vector(v323 - v326.x / 2, v324), color(255, 255, 255, 255), nil, v325);
        local v327 = v71();
        local v328 = "< " .. v318(v327) .. " >";
        local v329 = render.measure_text(v279, nil, v328);
        render.text(v279, vector(v323 - v329.x / 2, v324 + 11), color(128, 128, 128, 255), nil, v328);
        local v330 = 255;
        local v331 = {
            [1] = {
                text = "DT", 
                active = ui.find("Aimbot", "Ragebot", "Main", "Double Tap"):get(true) and rage.exploit:get() == 1
            }
        };
        local v332 = {
            [1] = {
                active = false, 
                text = "MD"
            }, 
            [2] = {
                text = "BAIM", 
                active = ui.find("Aimbot", "Ragebot", "Safety", "Body Aim"):get() == "Force"
            }
        };
        local v333 = ui.get_binds();
        for _, v335 in pairs(v333) do
            if v335.name == "Min. Damage" and v335.active then
                v332[1].active = true;
                break;
            end;
        end;
        local v336 = 3;
        local v337 = 0;
        for _, v339 in ipairs(v331) do
            v337 = v337 + render.measure_text(v279, nil, v339.text).x;
        end;
        local v340 = v323 - v337 / 2;
        for _, v342 in ipairs(v331) do
            local l_text_0 = v342.text;
            local v344 = v321(v342.active, v330);
            local v345 = render.measure_text(v279, nil, l_text_0);
            render.text(v279, vector(v340, v324 + 22), v344, nil, l_text_0);
            v340 = v340 + v345.x + v336;
        end;
        local v346 = -8;
        for v347 = 1, #v332 do
            v346 = v346 + render.measure_text(v279, nil, v332[v347].text).x;
        end;
        local v348 = v323 - (v346 + v336 * (#v332 - 1)) / 2 - 4;
        for v349 = 1, #v332 do
            local v350 = v332[v349];
            local l_text_1 = v350.text;
            local v352 = v321(v350.active, v330);
            local v353 = render.measure_text(v279, nil, l_text_1);
            render.text(v279, vector(v348, v324 + 33), v352, nil, l_text_1);
            v348 = v348 + v353.x + v336;
        end;
        return;
    end;
end;
events.render:set(v354);
local function v357(v355)
    -- upvalues: v17 (ref)
    local v356 = entity.get_local_player();
    if not v356 or v356.m_MoveType ~= 9 then
        return;
    elseif not v17:get("fast ladder movement") then
        return;
    else
        if v355.sidemove == 0 then
            v355.view_angles.y = v355.view_angles.y + 45;
        elseif v355.sidemove < 0 and v355.in_forward or v355.sidemove > 0 and v355.in_back then
            v355.view_angles.y = v355.view_angles.y + 90;
        end;
        v355.in_moveleft = v355.in_back;
        v355.in_moveright = v355.in_forward;
        if v355.view_angles.x < 0 then
            v355.view_angles.x = -45;
        end;
        return;
    end;
end;
local v358 = render.load_font("Tahoma", 13, "a");
local v359 = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n  <circle cx=\"12\" cy=\"7\" r=\"4\" fill=\"rgb(148, 170, 54)\"/>\n  <rect x=\"6\" y=\"12\" width=\"12\" height=\"10\" fill=\"rgb(148, 170, 54)\" rx=\"8\" ry=\"8\"/>\n</svg>\n";
local v360 = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n  <rect x=\"4\" y=\"12\" width=\"4\" height=\"8\" fill=\"rgb(148, 170, 54)\"/>\n  <rect x=\"10\" y=\"8\" width=\"4\" height=\"12\" fill=\"rgb(148, 170, 54)\"/>\n  <rect x=\"16\" y=\"4\" width=\"4\" height=\"16\" fill=\"rgb(148, 170, 54)\"/>\n</svg>\n";
local v361 = render.load_image(v359, vector(16, 16));
local v362 = render.load_image(v360, vector(16, 16));
local v363 = 0;
local v364 = 0;
local v365 = 0;
local v366 = 10;
local function v370()
    if not globals.is_connected then
        return;
    elseif globals.is_connected then
        local v367 = utils.net_channel();
        local v368 = 0;
        local v369 = v367:get_packet_response_latency(v368, v367.sequence_nr[v368]);
        return math.floor(v369);
    else
        return;
    end;
end;
local function v396()
    -- upvalues: v31 (ref), v370 (ref), v358 (ref), v363 (ref), v35 (ref), v366 (ref), v364 (ref), v365 (ref), v362 (ref), v361 (ref)
    if globals.is_connected and v31:get(true) then
        local v371 = render.screen_size();
        local v372 = "lonely ~ recode";
        local v373 = common.get_username();
        local v374 = tostring(math.floor(v370())) .. " ms";
        local v375 = render.measure_text(v358, nil, v372);
        local v376 = render.measure_text(v358, nil, v373);
        local v377 = render.measure_text(v358, nil, v374);
        local v378 = 10;
        local v379 = v375.x + v378 * 2;
        local v380 = v377.x + 40;
        local v381 = v376.x + 30;
        v363 = v35(v363, v379, globals.frametime * v366);
        v364 = v35(v364, v380, globals.frametime * v366);
        v365 = v35(v365, v381, globals.frametime * v366);
        local v382 = vector(v371.x - v363 - v364 - v365 - 30, 10);
        local v383 = vector(v382.x + v363, 40);
        local v384 = vector(v383.x + 5, 10);
        local v385 = vector(v384.x + v364, 40);
        local v386 = vector(v385.x + 5, 10);
        local v387 = vector(v386.x + v365, 40);
        local v388 = color(0, 0, 0, 150);
        local v389 = color(255, 255, 255, 255);
        local v390 = 4;
        render.rect(v382, v383, v388, v390);
        render.rect(v384, v385, v388, v390);
        render.rect(v386, v387, v388, v390);
        local v391 = vector(v382.x + v378, v382.y + (30 - v375.y) / 2);
        render.text(v358, v391, v389, nil, v372);
        local v392 = vector(v384.x + 5, v384.y + 7);
        if v362 then
            render.texture(v362, v392, vector(16, 16));
        end;
        local v393 = vector(v392.x + 20, v384.y + (30 - v377.y) / 2);
        render.text(v358, v393, v389, nil, v374);
        local v394 = vector(v386.x + 5, v386.y + 7);
        if v361 then
            render.texture(v361, v394, vector(16, 16));
        end;
        local v395 = vector(v394.x + 20, v386.y + (30 - v376.y) / 2);
        render.text(v358, v395, v389, nil, v373);
    end;
end;
events.render:set(v396);
handle = function(v397)
    -- upvalues: l_MTools_0 (ref), v71 (ref), v10 (ref)
    l_MTools_0.AntiAims.Condition.Update();
    local v398 = v71();
    local _ = entity.get_local_player();
    if v398 == "S" then
        current_settings = v10.stand;
    elseif v398 == "A" then
        current_settings = v10.air;
    elseif v398 == "AC" then
        current_settings = v10.airduck;
    elseif v398 == "W" then
        current_settings = v10.walk;
    elseif v398 == "C" then
        current_settings = v10.duck;
    elseif v398 == "SW" then
        current_settings = v10.slowwalk;
    elseif v398 == "CR" then
        current_settings = v10.duckrun;
    elseif v398 == "NE" then
        current_settings = v10.fakelag;
    end;
    if not (current_settings and current_settings.allow_switch and current_settings.allow_switch:get()) then
        current_settings = v10.global;
    end;
    local _ = current_settings.exploit:get(true);
    if rage.exploit:get() < 1 then
        return;
    else
        if current_settings.exploit:get(true) then
            rage.antiaim:inverter(false);
            rage.antiaim:override_hidden_pitch(89);
            rage.antiaim:override_hidden_yaw_offset(-70);
            ui.find("Aimbot", "Anti Aim", "Angles", "Yaw", "Hidden"):override(true);
            v397.force_defensive = v397.command_number % 7 == 0;
        end;
        return;
    end;
end;
local function v406()
    -- upvalues: v13 (ref), v14 (ref), v15 (ref), v16 (ref), v17 (ref), v18 (ref), v20 (ref), v21 (ref), v26 (ref), v28 (ref), v29 (ref), v30 (ref), v31 (ref), v9 (ref), v10 (ref), l_clipboard_0 (ref)
    local v401 = {
        manual = v13:get(), 
        freestnd = v14:get(), 
        freestanddisabler = v15:get(), 
        safehead = v16:get(), 
        tweaks = v17:get(), 
        aut_realese = v18:get(), 
        automatic_release_damage = v20:get(), 
        kill_say = v21:get(), 
        aspect_ratio_value = v26:get(), 
        legs_jitter = {
            ground = legs_jitter.jitter_combo:get(), 
            air = legs_jitter.air_combo:get(), 
            walk = legs_jitter.walk_combo:get(), 
            other = legs_jitter.other_combo:get()
        }, 
        hit_logs = v28:get(), 
        center_indicators = v29:get(), 
        ind_type = v30:get(), 
        watermark = v31:get(), 
        states = {}
    };
    for _, v403 in ipairs(v9) do
        local v404 = v10[v403];
        v401.states[v403] = {
            allow_switch = v404.allow_switch and v404.allow_switch:get() or false, 
            yaw = v404.yaw_slider:get(), 
            left_yaw = v404.left_yaw_slider:get(), 
            right_yaw = v404.right_yaw_slider:get(), 
            exploit = v404.exploit and v404.exploit:get() or false, 
            body_yaw_limit = v404.body_yaw_limit:get(), 
            body_yaw_enabled = v404.body_yaw_switch and v404.body_yaw_switch:get() or false, 
            body_yaw_type = v404.body_type_combo and v404.body_type_combo:get() or "left", 
            jitter_type = v404.yaw_jit_type and v404.yaw_jit_type:get() or "off", 
            jitter_value = v404.jitslider and v404.jitslider:get() or 0, 
            defensive_snap = v404.defensive_snap_switch and v404.defensive_snap_switch:get() or false, 
            defensive_pitch = v404.defensive_pitch_combo and v404.defensive_pitch_combo:get() or "down", 
            pitch = v404.pitch_slider and v404.pitch_slider:get() or 0, 
            pitch_1 = v404.pitch_slider_1 and v404.pitch_slider_1:get() or 0, 
            pitch_2 = v404.pitch_slider_2 and v404.pitch_slider_2:get() or 0, 
            pitch_sway = v404.pitch_sway_slider and v404.pitch_sway_slider:get() or 0, 
            defensive_yaw = v404.defensive_yaw_combo and v404.defensive_yaw_combo:get() or "custom", 
            custom_yaw = v404.yaw_custom_slider and v404.yaw_custom_slider:get() or 0, 
            spin_speed = v404.yaw_spin_slider and v404.yaw_spin_slider:get() or 0, 
            spin_random = v404.yaw_spin_random_slider and v404.yaw_spin_random_slider:get() or 0, 
            yaw_jitter_left = v404.yaw_jitter_left_slider and v404.yaw_jitter_left_slider:get() or 0, 
            yaw_jitter_right = v404.yaw_jitter_right_slider and v404.yaw_jitter_right_slider:get() or 0, 
            defensive_exploit_range = v404.defensive_aa_yaw_exploit_range and v404.defensive_aa_yaw_exploit_range:get() or 0, 
            defensive_exploit_speed = v404.defensive_aa_yaw_exploit_speed and v404.defensive_aa_yaw_exploit_speed:get() or 0, 
            break_lc = v404.defensive_break_combo and v404.defensive_break_combo:get() or "on peek"
        };
    end;
    local v405 = json.stringify(v401);
    l_clipboard_0.set(v405);
    common.add_notify("Config", "Configuration successfully exported!");
end;
local function v412()
    -- upvalues: l_clipboard_0 (ref), v13 (ref), v14 (ref), v15 (ref), v16 (ref), v17 (ref), v18 (ref), v20 (ref), v21 (ref), v26 (ref), v28 (ref), v29 (ref), v30 (ref), v31 (ref), v10 (ref)
    local v407 = l_clipboard_0.get();
    if not v407 or v407 == "" then
        common.add_notify("Config", "No data in clipboard! Check your configuration.");
        return;
    else
        local l_status_0, l_result_0 = pcall(json.parse, v407);
        if not l_status_0 then
            common.add_notify("Config", "Invalid JSON data in clipboard.");
            return;
        else
            v13:set(l_result_0.manual);
            v14:set(l_result_0.freestnd);
            v15:set(l_result_0.freestanddisabler);
            v16:set(l_result_0.safehead);
            v17:set(l_result_0.tweaks);
            v18:set(l_result_0.aut_realese);
            v20:set(l_result_0.automatic_release_damage);
            v21:set(l_result_0.kill_say);
            v26:set(l_result_0.aspect_ratio_value);
            if l_result_0.legs_jitter then
                legs_jitter.jitter_combo:set(l_result_0.legs_jitter.ground);
                legs_jitter.air_combo:set(l_result_0.legs_jitter.air);
                legs_jitter.walk_combo:set(l_result_0.legs_jitter.walk);
                legs_jitter.other_combo:set(l_result_0.legs_jitter.other);
            end;
            v28:set(l_result_0.hit_logs);
            v29:set(l_result_0.center_indicators);
            v30:set(l_result_0.ind_type);
            v31:set(l_result_0.watermark);
            for v410, v411 in pairs(l_result_0.states) do
                if v10[v410] then
                    if v10[v410].allow_switch and v411.allow_switch ~= nil then
                        v10[v410].allow_switch:set(v411.allow_switch);
                    end;
                    v10[v410].yaw_slider:set(v411.yaw);
                    v10[v410].left_yaw_slider:set(v411.left_yaw);
                    v10[v410].right_yaw_slider:set(v411.right_yaw);
                    if v411.exploit ~= nil and v10[v410].exploit then
                        v10[v410].exploit:set(v411.exploit);
                    end;
                    v10[v410].body_yaw_limit:set(v411.body_yaw_limit);
                    if v10[v410].body_yaw_switch and v411.body_yaw_enabled ~= nil then
                        v10[v410].body_yaw_switch:set(v411.body_yaw_enabled);
                    end;
                    if v10[v410].body_type_combo then
                        v10[v410].body_type_combo:set(v411.body_yaw_type);
                    end;
                    if v10[v410].yaw_jit_type then
                        v10[v410].yaw_jit_type:set(v411.jitter_type);
                    end;
                    if v10[v410].jitslider then
                        v10[v410].jitslider:set(v411.jitter_value);
                    end;
                    if v10[v410].defensive_snap_switch and v411.defensive_snap ~= nil then
                        v10[v410].defensive_snap_switch:set(v411.defensive_snap);
                    end;
                    if v10[v410].defensive_pitch_combo then
                        v10[v410].defensive_pitch_combo:set(v411.defensive_pitch);
                    end;
                    if v10[v410].pitch_slider then
                        v10[v410].pitch_slider:set(v411.pitch);
                    end;
                    if v10[v410].pitch_slider_1 then
                        v10[v410].pitch_slider_1:set(v411.pitch_1);
                    end;
                    if v10[v410].pitch_slider_2 then
                        v10[v410].pitch_slider_2:set(v411.pitch_2);
                    end;
                    if v10[v410].pitch_sway_slider then
                        v10[v410].pitch_sway_slider:set(v411.pitch_sway);
                    end;
                    if v10[v410].defensive_yaw_combo then
                        v10[v410].defensive_yaw_combo:set(v411.defensive_yaw);
                    end;
                    if v10[v410].yaw_custom_slider then
                        v10[v410].yaw_custom_slider:set(v411.custom_yaw);
                    end;
                    if v10[v410].yaw_spin_slider then
                        v10[v410].yaw_spin_slider:set(v411.spin_speed);
                    end;
                    if v10[v410].yaw_spin_random_slider then
                        v10[v410].yaw_spin_random_slider:set(v411.spin_random);
                    end;
                    if v10[v410].yaw_jitter_left_slider then
                        v10[v410].yaw_jitter_left_slider:set(v411.yaw_jitter_left);
                    end;
                    if v10[v410].yaw_jitter_right_slider then
                        v10[v410].yaw_jitter_right_slider:set(v411.yaw_jitter_right);
                    end;
                    if v10[v410].defensive_aa_yaw_exploit_range then
                        v10[v410].defensive_aa_yaw_exploit_range:set(v411.defensive_exploit_range);
                    end;
                    if v10[v410].defensive_aa_yaw_exploit_speed then
                        v10[v410].defensive_aa_yaw_exploit_speed:set(v411.defensive_exploit_speed);
                    end;
                    if v10[v410].defensive_break_combo then
                        v10[v410].defensive_break_combo:set(v411.break_lc);
                    end;
                end;
            end;
            common.add_notify("Config", "Configuration successfully imported!");
            return;
        end;
    end;
end;
local _ = v5:button("export", function()
    -- upvalues: v406 (ref)
    v406();
end);
local _ = v5:button("import", function()
    -- upvalues: v412 (ref)
    v412();
end);
v4:texture(render.load_image_from_file("nl\\lonely\\pic.jpeg", vector(300, 330)), vector(280, 300), color(255, 255, 255, 255), "f", 10);
events.createmove:set(function(v415)
    -- upvalues: v88 (ref), v106 (ref), v121 (ref), v147 (ref), v95 (ref), v156 (ref), v164 (ref), v186 (ref), v187 (ref), v357 (ref)
    v88();
    v106();
    v121();
    v147();
    v95();
    v156();
    v164(v415);
    v186();
    v187();
    on_createmove123(v415);
    v357(v415);
    handle(v415);
end);